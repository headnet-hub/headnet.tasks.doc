# ML System Design Doc - HeadNet Tasks MVP v2.0 [RU]
## Дизайн ML системы - HeadNet Tasks MVP №2

### 1. Цели и предпосылки 
#### 1.1. Зачем идем в разработку продукта?  

- **Бизнес-цель:** Продолжение развития приложения HeadNet Tasks для помощи пользователям в управлении задачами и эмоциональным благополучием. Внедрение функционала для быстрого добавления и редактирования задач, функций оптимизации расписания и предупреждения о риске пропуска дедлайнов.
- **Польза от использования ML:** Для работоспособности функционала оптимизации расписания и предупреждений о риске пропуска дедлайнов требуется больше информации, чем пользователи обычно заполняют при использовании task менеджеров. Для людей с высокой загруженностью добавление задач не должно занимать много времени, поэтому необходимо использовать ML для парсинга ввода пользователя для быстрого добавления задач, а также для поиска задачи, которую пользователь хочет отредактировать.
- **Критерии успеха:** Снижение количества пропущенных дедлайнов, улучшение общего эмоционального состояния, уменьшение времени на добавление задач.

#### 1.2. Бизнес-требования и ограничения  

- **Бизнес-требования:** Разработка функционала для оптимизации расписания, парсинга задачи из текстового сообщения, поиска задачи по текстовому запросу на редактирование среди всех задач пользователя.
- **Бизнес-ограничения:** Обеспечение высокой точности парсинга и поиска задач, предоставление оптимизированного расписания, которое подходит пользователю.
- **Критерии успеха пилота:** Успешное снижение количества пропущенных дедлайнов, улучшение эмоционального состояния пользователей и их удовлетворенности приложением, сокращение времени на добавление и редактирование задач.

#### 1.3. Что входит в скоуп проекта/итерации, что не входит   

- **На закрытие каких БТ подписываемся:** Разработка и внедрение системы оптимизации расписания, парсинга задач и поиска задач по текстовому запросу на редактирование задачи.
- **Что не будет закрыто:** Оптимизация опыта пользователя при использовании функционала приложения будет отложена до следующих итераций.
- **Результат с точки зрения качества кода:** Чистый, модульный, хорошо документированный код, удовлетворяющий стандартам индустрии.
- **Технический долг:** В данный момент мы проверяем гипотезы максимально доступными средствами, оптимизиация расходов и улучшение работы сервисов будет отложено до следующих итераций.

#### 1.4. Предпосылки решения  

- **Используемые данные:** Данные о задачах и событиях пользователей, их эмоциональные оценки за день, данные о дедлайнах (в том числе их пропуски), данные о запланированном и затраченном времени на задачу, важность задач.
- **Горизонт прогноза:** Краткосрочный (два - три дня).
- **Гранулярность модели:** Анализ на уровне индивидуального пользователя, отдельного запроса.

### 2. Методология

#### 2.1. Постановка задачи  

- Техническая задача: Разработка функционала для быстрого добавления и редактирования задач  на основе ML, оптимизации расписания и предупреждения о риске пропуска дедлайнов.

#### 2.2. Блок-схема решения  

- Блок-схема включает этапы: Сбор и предобработка данных о задачах, событиях и настроении пользователей. Внедрение моделей на основе RoBERTa для поиска задач и ChatGPT API для парсинга текстовых описаний задач. Разработка алгоритмов на основе теории расписаний для предоставления пользователю оптимизированного расписания.

#### 2.3. Этапы решения задачи

1. **Подготовка данных:**
   - Сбор данных о запросах пользователей при создании и редактировании задач
   - Сбор данных о задачах пользователей, созданных при помощи бота.
   - Сбор данных о расписаниях оптимизированных при помощи бота.

2. **Разработка алгоритма оптимизации расписания:**
   - Использование данных о задачах, сроках, приоритетах и настроении для создания оптимального расписания с использованием теории расписаний.
   - Интеграция модели оптимизации с системой оценки настроения пользователя для улучшения эмоционального состояния пользователя.

3. **Использование TaskSearchService и TaskParserService:**
   - TaskSearchService на основе модели RoBERTa для поиска задач.
   - TaskParserService с использованием ChatGPT API для парсинга задач.

4. **Тестирование и оптимизация системы:**
   - Проверка эффективности системы на пилотной группе пользователей.
   - Оптимизация алгоритмов на основе обратной связи.

### 3. Подготовка пилота  

#### 3.1. Способ оценки пилота

1. **Обратная Связь от Тестовых Пользователей:**
   - Сбор обратной связи от тестовой группы пользователей.

2. **Анализ Активности Пользователей:**
   - Оценка частоты использования ключевых функций приложения (создание задач, оценка настроения, оптимизация расписания).

3. **Изменения в Настроении Пользователей:**
   - Анализ данных, собранных с помощью AI Mood Tracker, для отслеживания изменений в настроении пользователей после применения рекомендаций.

4. **Оценка эффективности оптимизации расписания:**
   - Анализ количества пропущенных дедлайнов.

#### 3.2. Критерии Успешности Пилота

- **Улучшение Общего Впечатления от Приложения:**
   - Положительные отзывы от пользователей по поводу эффективности оптимизации расписания.
  
- **Повышение Уровня Взаимодействия:**
   - Увеличение частоты использования приложения и вовлеченности в его функции (частое введение оценок настроения, активное взаимодействие с оптимизацией расписания).

- **Позитивное Влияние на Настроение и Продуктивность:**
   - Заметное улучшение настроения пользователей и снижение количества пропущенных дедлайнов, основываясь на данных, собранных через AI Mood Tracker и систему оптимизации расписания.

#### 3.3. Подготовка пилота  

- **Вычислительные затраты:** Оценка необходимых вычислительных ресурсов для поддержки полнофункциональной версии приложения с AI Mood Tracker, рекомендательной системой и алгоритмом оптимизации расписания. А так же стоимости использования ChatGPT API.

### 4. Внедрение 

#### 4.1. Архитектура решения

- **Блок-схема и пояснения:**
    - Сервисы: AI Mood Tracker, Интеграция с Google API, Telegram API, ChatGPT API, алгоритм оптимизации расписания, сервис поиска задач.
    - Назначения: Анализ эмоционального состояния пользователя, предоставление персонализированных советов, управление задачами и оптимизация расписания.
    - Методы API: Получение данных о задачах и событиях, отправка оценок настроения, получение рекомендаций, оптимизация расписания, создание и редактирование задач.

#### 4.2. Описание инфраструктуры и масштабируемости

- **Инфраструктура и выбор:**
    - Использование облачных сервисов для хостинга приложения и моделей ML.
    - Плюсы: Гибкость, масштабируемость, надежность.
    - Минусы: Зависимость от внешнего поставщика, потенциальные затраты на облачные ресурсы.
    - Финальный выбор обоснован потребностью в высокой доступности и возможности масштабирования в зависимости от роста пользовательской базы.

#### 4.3. Требования к работе системы

- **SLA, пропускная способность и задержка:**
    - Высокая доступность (99.9% uptime).
    - Быстрый отклик системы на запросы пользователя (время отклика не более 200 мс).
    - Адекватное время обработки данных и предоставления рекомендаций (не более 1 секунды для большинства операций).

#### 4.4. Безопасность системы

- **Потенциальная уязвимость системы:**
    - Риск несанкционированного доступа к данным пользователя.
    - Применение шифрования данных на уровне хранения и передачи, строгие протоколы аутентификации и авторизации.

#### 4.5. Безопасность данных

- **Соответствие GDPR и другим законам:**
    - Полная конфиденциальность данных пользователя.
    - Соблюдение правил хранения и обработки персональных данных.

#### 4.6. Издержки

- **Расчетные издержки на работу системы в месяц:**
    - Анализ затрат на облачные сервисы, включая вычислительные ресурсы, хранение данных и использование API (в первую очередь ChatGPT API).
    - Оценка расходов на поддержку и обслуживание системы.

#### 4.7. Integration points

- **Взаимодействие между сервисами:**
    - Связь между модулем AI Mood Tracker, рекомендательной системой и алгоритмом оптимизации расписания.
    - Интеграция с внешними сервисами (Google API, Telegram API, ChatGPT API).

#### 4.8. Риски

- **Потенциальные риски и неопределенности:**
    - Технические проблемы в работе моделей ML.
    - Риски, связанные с масштабированием системы.
    - Необходимость постоянного обновления и поддержки системы для соответствия меняющимся требованиям пользователей.

Этот документ представляет собой расширенный дизайн системы для HeadNet Tasks MVP v2.0, который включает функционал быстрого добавления и редактирования задач, оптимизации расписания и предупреждения о риске пропуска дедлайнов.
